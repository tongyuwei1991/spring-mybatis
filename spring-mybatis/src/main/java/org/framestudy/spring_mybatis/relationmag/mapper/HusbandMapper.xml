<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<!-- namespace命名空间 :包、文件夹
命名空间的作用：分类，避免sql语句重复，与JAVA接口关联
-->

<mapper namespace="org.framestudy.spring_mybatis.usermag.mapper.UserMapper">
	<resultMap type="UserInfo" id="userMap">
		<id property="id" column="id" javaType="java.lang.Integer"/>
		<result property="userName" column="user_name" javaType="java.lang.String"/>
		<result property="pwd" column="pwd" javaType="java.lang.String"/>
		<result property="age" column="age" javaType="java.lang.Integer"/>
		<result property="loginName" column="login_name" javaType="java.lang.String"/>
	</resultMap>

		<!-- id属性定义着接口方法的名称 -->
		<!-- 在mybatis框架中，取值方式有2种：第一种是#{}，第二种是${}
			第一个区别在于：#取值的时候，会在参数的两侧添加''单引号,但是$取值的时候不会添加单引号''
			第二个区别在与：#取值，编译方式采用预编译，$取值，编译方式直接编译（可能会有SQL注入的危险）
		--> 	
	<insert id="saveUserInfo" useGeneratedKeys="true" keyProperty="id">
		insert into t_user(user_name,pwd,age) values(#{userName},#{pwd},#{age})
	</insert>

 	<update id="updateUserInfo" parameterType="UserInfo">
		<!-- update t_user set user_name = #{u.userName},pwd=#{u.pwd},age=#{u.age},login_name=#{u.loginName} where id=#{u.id}
		 -->
		<set>
			<if test="u.userName != null">
				user_name = #{u.userName},
			</if>
			<if test="u.pwd != null">
				pwd = #{u.pwd},
			</if>
			<if test="u.age != null">
				age=#{u.age},
			</if>
		</set>
		
		<where>
			id= #{u.id}
		</where>
		
		
	</update> 
	
	
	
	
	
	
	
	<delete id="deleteUserInfo"> <!-- 后面的属性什么时候添加，添加哪个属性？ -->
		delete from t_user where id=#{id}
	</delete>
	
	<select id="getUserInfoById" resultMap="userMap">
		select * from t_user where id=#{id}
	</select>
	
	<select id="getUserByLoginNameAndPwd" resultMap="userMap">
		select user_name from t_user where login_name=#{loginName} and pwd=#{pwd}
	</select>
	
	<!-- 
	resultType与resultMap一样，都是用来映射返回结果集与对象之间的关系
	只不过reultType需要结果集中字段名与对象的属性名保持一致（解决办法：取别名）
	CONCAT拼接字符串
	 -->
	 <select id="queryUserListByMap" resultType="userInfo">
		select login_name as loginName,pwd from t_user where user_name like CONCAT(#{map.userName},'%') and age=#{map.age}	 	
	 </select>
	
	<!-- 批量新增 语法：insert into 表(字段) values (),(),()... -->
	<insert id="batchSaveUserInfo" parameterType="java.util.List">
		insert into t_user (user_name,pwd,age,login_name) values
		<foreach collection="users" item="user" separator=",">
			(#{user.userName}.#{user.pwd},#{user.age},#{user.loginName})<!-- 此处的user为foreach中的item属性值 -->
		</foreach>
	</insert>	
	
	<delete id="batchDeleteUserInfo">
		delete from t_user where id in
		<foreach collection="users" item="user" open="(" close=")" separator=",">
			#{user.id}
		</foreach>
	</delete>
	
	<sql id="commonSql">
		<where>
			<if test="map.userName != null">
				and user_name like CONCAT(#{map.userName},'%')
			</if>
			<if test="map.loginName != null">
				and login_name like CONCAT(#{map.loginName},'%')
			</if>
		</where> 
	</sql>
	
	
	
	<select id="countUserListByMapToPage" resultType="int">
		<!-- 
			没有where查询条件的时候，使用count(*)最快
			如果有查询条件，使用count(id)最优
		 -->
		 select count(*) from t_user
		 <!-- where标签出现的地方会自动添加一个where字符串，并且该标签会自动忽略紧随其后的and或or -->
		 <include refid="commonSql"></include>
	</select>
	
	<select id="getUserListByMapToPage" resultMap="userMap">
		select* from t_user
		<include refid="commonSql"></include>
		limit #{map.index},#{map.rows}
	</select>
	
	
	
	
	
	
	
	
	
</mapper>